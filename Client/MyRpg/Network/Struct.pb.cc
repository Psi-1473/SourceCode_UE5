// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR BaseCharacterInfo::BaseCharacterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaseCharacterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseCharacterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseCharacterInfoDefaultTypeInternal() {}
  union {
    BaseCharacterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseCharacterInfoDefaultTypeInternal _BaseCharacterInfo_default_instance_;
PROTOBUF_CONSTEXPR ObjectInfo::ObjectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.objtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerMoveInfo::PlayerMoveInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dirx_)*/0
  , /*decltype(_impl_.diry_)*/0
  , /*decltype(_impl_.dirz_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.horizontal_)*/0
  , /*decltype(_impl_.vertical_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerMoveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerMoveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerMoveInfoDefaultTypeInternal() {}
  union {
    PlayerMoveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMoveInfoDefaultTypeInternal _PlayerMoveInfo_default_instance_;
PROTOBUF_CONSTEXPR ItemUpdateInfo::ItemUpdateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dbid_)*/uint64_t{0u}
  , /*decltype(_impl_.templateid_)*/0u
  , /*decltype(_impl_.number_)*/0u
  , /*decltype(_impl_.slotnumber_)*/0u
  , /*decltype(_impl_.itemtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemUpdateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemUpdateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemUpdateInfoDefaultTypeInternal() {}
  union {
    ItemUpdateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemUpdateInfoDefaultTypeInternal _ItemUpdateInfo_default_instance_;
PROTOBUF_CONSTEXPR StatInfo::StatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.mp_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.atk_)*/0
  , /*decltype(_impl_.dfs_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatInfoDefaultTypeInternal() {}
  union {
    StatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatInfoDefaultTypeInternal _StatInfo_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Struct_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Struct_2eproto = nullptr;

const uint32_t TableStruct_Struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::BaseCharacterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::BaseCharacterInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::BaseCharacterInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::BaseCharacterInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::BaseCharacterInfo, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.objtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.dirx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.diry_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.dirz_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.horizontal_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.vertical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemUpdateInfo, _impl_.dbid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemUpdateInfo, _impl_.templateid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemUpdateInfo, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemUpdateInfo, _impl_.slotnumber_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemUpdateInfo, _impl_.itemtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.mp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.atk_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.dfs_),
  PROTOBUF_FIELD_OFFSET(::Protocol::StatInfo, _impl_.level_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::BaseCharacterInfo)},
  { 10, -1, -1, sizeof(::Protocol::ObjectInfo)},
  { 22, -1, -1, sizeof(::Protocol::PlayerMoveInfo)},
  { 34, -1, -1, sizeof(::Protocol::ItemUpdateInfo)},
  { 45, -1, -1, sizeof(::Protocol::StatInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_BaseCharacterInfo_default_instance_._instance,
  &::Protocol::_ObjectInfo_default_instance_._instance,
  &::Protocol::_PlayerMoveInfo_default_instance_._instance,
  &::Protocol::_ItemUpdateInfo_default_instance_._instance,
  &::Protocol::_StatInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Struct.proto\022\010Protocol\032\nEnum.proto\"k\n\021"
  "BaseCharacterInfo\022\021\n\tobject_id\030\001 \001(\004\022\014\n\004"
  "name\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022&\n\004type\030\004 \001(\0162"
  "\030.Protocol.ECharacterType\"\214\001\n\nObjectInfo"
  "\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001("
  "\002\022\t\n\001z\030\004 \001(\002\022\037\n\005state\030\005 \001(\0162\020.Protocol.E"
  "State\022)\n\007objType\030\006 \001(\0162\030.Protocol.EChara"
  "cterType\"m\n\016PlayerMoveInfo\022\014\n\004dirX\030\001 \001(\002"
  "\022\014\n\004dirY\030\002 \001(\002\022\014\n\004dirZ\030\003 \001(\002\022\013\n\003yaw\030\004 \001("
  "\002\022\022\n\nhorizontal\030\005 \001(\002\022\020\n\010vertical\030\006 \001(\002\""
  "}\n\016ItemUpdateInfo\022\014\n\004dbId\030\001 \001(\004\022\022\n\ntempl"
  "ateId\030\002 \001(\r\022\016\n\006number\030\003 \001(\r\022\022\n\nslotNumbe"
  "r\030\004 \001(\r\022%\n\010itemType\030\005 \001(\0162\023.Protocol.EIt"
  "emType\"k\n\010StatInfo\022\021\n\tobject_id\030\001 \001(\004\022\n\n"
  "\002hp\030\002 \001(\002\022\n\n\002mp\030\003 \001(\002\022\013\n\003exp\030\004 \001(\002\022\013\n\003at"
  "k\030\005 \001(\002\022\013\n\003dfs\030\006 \001(\002\022\r\n\005level\030\007 \001(\005b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Struct_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::_pbi::once_flag descriptor_table_Struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Struct_2eproto = {
    false, false, 643, descriptor_table_protodef_Struct_2eproto,
    "Struct.proto",
    &descriptor_table_Struct_2eproto_once, descriptor_table_Struct_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_Struct_2eproto::offsets,
    file_level_metadata_Struct_2eproto, file_level_enum_descriptors_Struct_2eproto,
    file_level_service_descriptors_Struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Struct_2eproto_getter() {
  return &descriptor_table_Struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Struct_2eproto(&descriptor_table_Struct_2eproto);
namespace Protocol {

// ===================================================================

class BaseCharacterInfo::_Internal {
 public:
};

BaseCharacterInfo::BaseCharacterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.BaseCharacterInfo)
}
BaseCharacterInfo::BaseCharacterInfo(const BaseCharacterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseCharacterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.BaseCharacterInfo)
}

inline void BaseCharacterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BaseCharacterInfo::~BaseCharacterInfo() {
  // @@protoc_insertion_point(destructor:Protocol.BaseCharacterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseCharacterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void BaseCharacterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseCharacterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.BaseCharacterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseCharacterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.BaseCharacterInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ECharacterType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::ECharacterType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseCharacterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.BaseCharacterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.BaseCharacterInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // .Protocol.ECharacterType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.BaseCharacterInfo)
  return target;
}

size_t BaseCharacterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.BaseCharacterInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // .Protocol.ECharacterType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseCharacterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseCharacterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseCharacterInfo::GetClassData() const { return &_class_data_; }


void BaseCharacterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseCharacterInfo*>(&to_msg);
  auto& from = static_cast<const BaseCharacterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.BaseCharacterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseCharacterInfo::CopyFrom(const BaseCharacterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.BaseCharacterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseCharacterInfo::IsInitialized() const {
  return true;
}

void BaseCharacterInfo::InternalSwap(BaseCharacterInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseCharacterInfo, _impl_.type_)
      + sizeof(BaseCharacterInfo::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(BaseCharacterInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseCharacterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[0]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
};

ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.objtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objtype_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.objtype_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ObjectInfo)
}

inline void ObjectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.objtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.objtype_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.objtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::EState>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ECharacterType objType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_objtype(static_cast<::Protocol::ECharacterType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // .Protocol.EState state = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  // .Protocol.ECharacterType objType = 6;
  if (this->_internal_objtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_objtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // .Protocol.EState state = 5;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .Protocol.ECharacterType objType = 6;
  if (this->_internal_objtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_objtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }


void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectInfo*>(&to_msg);
  auto& from = static_cast<const ObjectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_objtype() != 0) {
    _this->_internal_set_objtype(from._internal_objtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.objtype_)
      + sizeof(ObjectInfo::_impl_.objtype_)
      - PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[1]);
}

// ===================================================================

class PlayerMoveInfo::_Internal {
 public:
};

PlayerMoveInfo::PlayerMoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PlayerMoveInfo)
}
PlayerMoveInfo::PlayerMoveInfo(const PlayerMoveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerMoveInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dirx_){}
    , decltype(_impl_.diry_){}
    , decltype(_impl_.dirz_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.horizontal_){}
    , decltype(_impl_.vertical_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dirx_, &from._impl_.dirx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vertical_) -
    reinterpret_cast<char*>(&_impl_.dirx_)) + sizeof(_impl_.vertical_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PlayerMoveInfo)
}

inline void PlayerMoveInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dirx_){0}
    , decltype(_impl_.diry_){0}
    , decltype(_impl_.dirz_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.horizontal_){0}
    , decltype(_impl_.vertical_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerMoveInfo::~PlayerMoveInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PlayerMoveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerMoveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerMoveInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerMoveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PlayerMoveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dirx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vertical_) -
      reinterpret_cast<char*>(&_impl_.dirx_)) + sizeof(_impl_.vertical_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMoveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float dirX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.dirx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dirY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.diry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dirZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.dirz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float horizontal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vertical = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerMoveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PlayerMoveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float dirX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirx = this->_internal_dirx();
  uint32_t raw_dirx;
  memcpy(&raw_dirx, &tmp_dirx, sizeof(tmp_dirx));
  if (raw_dirx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_dirx(), target);
  }

  // float dirY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diry = this->_internal_diry();
  uint32_t raw_diry;
  memcpy(&raw_diry, &tmp_diry, sizeof(tmp_diry));
  if (raw_diry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_diry(), target);
  }

  // float dirZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirz = this->_internal_dirz();
  uint32_t raw_dirz;
  memcpy(&raw_dirz, &tmp_dirz, sizeof(tmp_dirz));
  if (raw_dirz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_dirz(), target);
  }

  // float yaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw(), target);
  }

  // float horizontal = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal = this->_internal_horizontal();
  uint32_t raw_horizontal;
  memcpy(&raw_horizontal, &tmp_horizontal, sizeof(tmp_horizontal));
  if (raw_horizontal != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_horizontal(), target);
  }

  // float vertical = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vertical = this->_internal_vertical();
  uint32_t raw_vertical;
  memcpy(&raw_vertical, &tmp_vertical, sizeof(tmp_vertical));
  if (raw_vertical != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_vertical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PlayerMoveInfo)
  return target;
}

size_t PlayerMoveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PlayerMoveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float dirX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirx = this->_internal_dirx();
  uint32_t raw_dirx;
  memcpy(&raw_dirx, &tmp_dirx, sizeof(tmp_dirx));
  if (raw_dirx != 0) {
    total_size += 1 + 4;
  }

  // float dirY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diry = this->_internal_diry();
  uint32_t raw_diry;
  memcpy(&raw_diry, &tmp_diry, sizeof(tmp_diry));
  if (raw_diry != 0) {
    total_size += 1 + 4;
  }

  // float dirZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirz = this->_internal_dirz();
  uint32_t raw_dirz;
  memcpy(&raw_dirz, &tmp_dirz, sizeof(tmp_dirz));
  if (raw_dirz != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float horizontal = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal = this->_internal_horizontal();
  uint32_t raw_horizontal;
  memcpy(&raw_horizontal, &tmp_horizontal, sizeof(tmp_horizontal));
  if (raw_horizontal != 0) {
    total_size += 1 + 4;
  }

  // float vertical = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vertical = this->_internal_vertical();
  uint32_t raw_vertical;
  memcpy(&raw_vertical, &tmp_vertical, sizeof(tmp_vertical));
  if (raw_vertical != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerMoveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerMoveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerMoveInfo::GetClassData() const { return &_class_data_; }


void PlayerMoveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerMoveInfo*>(&to_msg);
  auto& from = static_cast<const PlayerMoveInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PlayerMoveInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirx = from._internal_dirx();
  uint32_t raw_dirx;
  memcpy(&raw_dirx, &tmp_dirx, sizeof(tmp_dirx));
  if (raw_dirx != 0) {
    _this->_internal_set_dirx(from._internal_dirx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diry = from._internal_diry();
  uint32_t raw_diry;
  memcpy(&raw_diry, &tmp_diry, sizeof(tmp_diry));
  if (raw_diry != 0) {
    _this->_internal_set_diry(from._internal_diry());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirz = from._internal_dirz();
  uint32_t raw_dirz;
  memcpy(&raw_dirz, &tmp_dirz, sizeof(tmp_dirz));
  if (raw_dirz != 0) {
    _this->_internal_set_dirz(from._internal_dirz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal = from._internal_horizontal();
  uint32_t raw_horizontal;
  memcpy(&raw_horizontal, &tmp_horizontal, sizeof(tmp_horizontal));
  if (raw_horizontal != 0) {
    _this->_internal_set_horizontal(from._internal_horizontal());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vertical = from._internal_vertical();
  uint32_t raw_vertical;
  memcpy(&raw_vertical, &tmp_vertical, sizeof(tmp_vertical));
  if (raw_vertical != 0) {
    _this->_internal_set_vertical(from._internal_vertical());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerMoveInfo::CopyFrom(const PlayerMoveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PlayerMoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMoveInfo::IsInitialized() const {
  return true;
}

void PlayerMoveInfo::InternalSwap(PlayerMoveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerMoveInfo, _impl_.vertical_)
      + sizeof(PlayerMoveInfo::_impl_.vertical_)
      - PROTOBUF_FIELD_OFFSET(PlayerMoveInfo, _impl_.dirx_)>(
          reinterpret_cast<char*>(&_impl_.dirx_),
          reinterpret_cast<char*>(&other->_impl_.dirx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMoveInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[2]);
}

// ===================================================================

class ItemUpdateInfo::_Internal {
 public:
};

ItemUpdateInfo::ItemUpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ItemUpdateInfo)
}
ItemUpdateInfo::ItemUpdateInfo(const ItemUpdateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemUpdateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dbid_){}
    , decltype(_impl_.templateid_){}
    , decltype(_impl_.number_){}
    , decltype(_impl_.slotnumber_){}
    , decltype(_impl_.itemtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dbid_, &from._impl_.dbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemtype_) -
    reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.itemtype_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ItemUpdateInfo)
}

inline void ItemUpdateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dbid_){uint64_t{0u}}
    , decltype(_impl_.templateid_){0u}
    , decltype(_impl_.number_){0u}
    , decltype(_impl_.slotnumber_){0u}
    , decltype(_impl_.itemtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemUpdateInfo::~ItemUpdateInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ItemUpdateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemUpdateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemUpdateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ItemUpdateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.itemtype_) -
      reinterpret_cast<char*>(&_impl_.dbid_)) + sizeof(_impl_.itemtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemUpdateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 dbId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 templateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.templateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 slotNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.slotnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EItemType itemType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_itemtype(static_cast<::Protocol::EItemType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemUpdateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ItemUpdateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dbId = 1;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dbid(), target);
  }

  // uint32 templateId = 2;
  if (this->_internal_templateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_templateid(), target);
  }

  // uint32 number = 3;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number(), target);
  }

  // uint32 slotNumber = 4;
  if (this->_internal_slotnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_slotnumber(), target);
  }

  // .Protocol.EItemType itemType = 5;
  if (this->_internal_itemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_itemtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ItemUpdateInfo)
  return target;
}

size_t ItemUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ItemUpdateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 dbId = 1;
  if (this->_internal_dbid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dbid());
  }

  // uint32 templateId = 2;
  if (this->_internal_templateid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_templateid());
  }

  // uint32 number = 3;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
  }

  // uint32 slotNumber = 4;
  if (this->_internal_slotnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slotnumber());
  }

  // .Protocol.EItemType itemType = 5;
  if (this->_internal_itemtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_itemtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemUpdateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemUpdateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemUpdateInfo::GetClassData() const { return &_class_data_; }


void ItemUpdateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemUpdateInfo*>(&to_msg);
  auto& from = static_cast<const ItemUpdateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ItemUpdateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dbid() != 0) {
    _this->_internal_set_dbid(from._internal_dbid());
  }
  if (from._internal_templateid() != 0) {
    _this->_internal_set_templateid(from._internal_templateid());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_slotnumber() != 0) {
    _this->_internal_set_slotnumber(from._internal_slotnumber());
  }
  if (from._internal_itemtype() != 0) {
    _this->_internal_set_itemtype(from._internal_itemtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemUpdateInfo::CopyFrom(const ItemUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ItemUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUpdateInfo::IsInitialized() const {
  return true;
}

void ItemUpdateInfo::InternalSwap(ItemUpdateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemUpdateInfo, _impl_.itemtype_)
      + sizeof(ItemUpdateInfo::_impl_.itemtype_)
      - PROTOBUF_FIELD_OFFSET(ItemUpdateInfo, _impl_.dbid_)>(
          reinterpret_cast<char*>(&_impl_.dbid_),
          reinterpret_cast<char*>(&other->_impl_.dbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemUpdateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[3]);
}

// ===================================================================

class StatInfo::_Internal {
 public:
};

StatInfo::StatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.StatInfo)
}
StatInfo::StatInfo(const StatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.mp_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.atk_){}
    , decltype(_impl_.dfs_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:Protocol.StatInfo)
}

inline void StatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.mp_){0}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.atk_){0}
    , decltype(_impl_.dfs_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatInfo::~StatInfo() {
  // @@protoc_insertion_point(destructor:Protocol.StatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.StatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.mp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float atk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.atk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dfs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.dfs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.StatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_hp(), target);
  }

  // float mp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = this->_internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_mp(), target);
  }

  // float exp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_exp(), target);
  }

  // float atk = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = this->_internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_atk(), target);
  }

  // float dfs = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dfs = this->_internal_dfs();
  uint32_t raw_dfs;
  memcpy(&raw_dfs, &tmp_dfs, sizeof(tmp_dfs));
  if (raw_dfs != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_dfs(), target);
  }

  // int32 level = 7;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.StatInfo)
  return target;
}

size_t StatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.StatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // float mp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = this->_internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    total_size += 1 + 4;
  }

  // float exp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    total_size += 1 + 4;
  }

  // float atk = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = this->_internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    total_size += 1 + 4;
  }

  // float dfs = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dfs = this->_internal_dfs();
  uint32_t raw_dfs;
  memcpy(&raw_dfs, &tmp_dfs, sizeof(tmp_dfs));
  if (raw_dfs != 0) {
    total_size += 1 + 4;
  }

  // int32 level = 7;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatInfo::GetClassData() const { return &_class_data_; }


void StatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatInfo*>(&to_msg);
  auto& from = static_cast<const StatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.StatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = from._internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    _this->_internal_set_mp(from._internal_mp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = from._internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_atk = from._internal_atk();
  uint32_t raw_atk;
  memcpy(&raw_atk, &tmp_atk, sizeof(tmp_atk));
  if (raw_atk != 0) {
    _this->_internal_set_atk(from._internal_atk());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dfs = from._internal_dfs();
  uint32_t raw_dfs;
  memcpy(&raw_dfs, &tmp_dfs, sizeof(tmp_dfs));
  if (raw_dfs != 0) {
    _this->_internal_set_dfs(from._internal_dfs());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatInfo::CopyFrom(const StatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.StatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatInfo::IsInitialized() const {
  return true;
}

void StatInfo::InternalSwap(StatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatInfo, _impl_.level_)
      + sizeof(StatInfo::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(StatInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::BaseCharacterInfo*
Arena::CreateMaybeMessage< ::Protocol::BaseCharacterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::BaseCharacterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PlayerMoveInfo*
Arena::CreateMaybeMessage< ::Protocol::PlayerMoveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PlayerMoveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ItemUpdateInfo*
Arena::CreateMaybeMessage< ::Protocol::ItemUpdateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ItemUpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::StatInfo*
Arena::CreateMaybeMessage< ::Protocol::StatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::StatInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
