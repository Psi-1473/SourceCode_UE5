// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class BaseCharacterInfo;
struct BaseCharacterInfoDefaultTypeInternal;
extern BaseCharacterInfoDefaultTypeInternal _BaseCharacterInfo_default_instance_;
class ItemUpdateInfo;
struct ItemUpdateInfoDefaultTypeInternal;
extern ItemUpdateInfoDefaultTypeInternal _ItemUpdateInfo_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class PlayerMoveInfo;
struct PlayerMoveInfoDefaultTypeInternal;
extern PlayerMoveInfoDefaultTypeInternal _PlayerMoveInfo_default_instance_;
class StatInfo;
struct StatInfoDefaultTypeInternal;
extern StatInfoDefaultTypeInternal _StatInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::BaseCharacterInfo* Arena::CreateMaybeMessage<::Protocol::BaseCharacterInfo>(Arena*);
template<> ::Protocol::ItemUpdateInfo* Arena::CreateMaybeMessage<::Protocol::ItemUpdateInfo>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::PlayerMoveInfo* Arena::CreateMaybeMessage<::Protocol::PlayerMoveInfo>(Arena*);
template<> ::Protocol::StatInfo* Arena::CreateMaybeMessage<::Protocol::StatInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class BaseCharacterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.BaseCharacterInfo) */ {
 public:
  inline BaseCharacterInfo() : BaseCharacterInfo(nullptr) {}
  ~BaseCharacterInfo() override;
  explicit PROTOBUF_CONSTEXPR BaseCharacterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseCharacterInfo(const BaseCharacterInfo& from);
  BaseCharacterInfo(BaseCharacterInfo&& from) noexcept
    : BaseCharacterInfo() {
    *this = ::std::move(from);
  }

  inline BaseCharacterInfo& operator=(const BaseCharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseCharacterInfo& operator=(BaseCharacterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseCharacterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseCharacterInfo* internal_default_instance() {
    return reinterpret_cast<const BaseCharacterInfo*>(
               &_BaseCharacterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseCharacterInfo& a, BaseCharacterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseCharacterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseCharacterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseCharacterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseCharacterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseCharacterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseCharacterInfo& from) {
    BaseCharacterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseCharacterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.BaseCharacterInfo";
  }
  protected:
  explicit BaseCharacterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kLevelFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // int32 level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // .Protocol.ECharacterType type = 4;
  void clear_type();
  ::Protocol::ECharacterType type() const;
  void set_type(::Protocol::ECharacterType value);
  private:
  ::Protocol::ECharacterType _internal_type() const;
  void _internal_set_type(::Protocol::ECharacterType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.BaseCharacterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t object_id_;
    int32_t level_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kStateFieldNumber = 5,
    kObjTypeFieldNumber = 6,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // .Protocol.EState state = 5;
  void clear_state();
  ::Protocol::EState state() const;
  void set_state(::Protocol::EState value);
  private:
  ::Protocol::EState _internal_state() const;
  void _internal_set_state(::Protocol::EState value);
  public:

  // .Protocol.ECharacterType objType = 6;
  void clear_objtype();
  ::Protocol::ECharacterType objtype() const;
  void set_objtype(::Protocol::ECharacterType value);
  private:
  ::Protocol::ECharacterType _internal_objtype() const;
  void _internal_set_objtype(::Protocol::ECharacterType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    float x_;
    float y_;
    float z_;
    int state_;
    int objtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerMoveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerMoveInfo) */ {
 public:
  inline PlayerMoveInfo() : PlayerMoveInfo(nullptr) {}
  ~PlayerMoveInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerMoveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMoveInfo(const PlayerMoveInfo& from);
  PlayerMoveInfo(PlayerMoveInfo&& from) noexcept
    : PlayerMoveInfo() {
    *this = ::std::move(from);
  }

  inline PlayerMoveInfo& operator=(const PlayerMoveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMoveInfo& operator=(PlayerMoveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMoveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMoveInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveInfo*>(
               &_PlayerMoveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerMoveInfo& a, PlayerMoveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMoveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMoveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerMoveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerMoveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMoveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerMoveInfo& from) {
    PlayerMoveInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMoveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerMoveInfo";
  }
  protected:
  explicit PlayerMoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirXFieldNumber = 1,
    kDirYFieldNumber = 2,
    kDirZFieldNumber = 3,
    kYawFieldNumber = 4,
    kHorizontalFieldNumber = 5,
    kVerticalFieldNumber = 6,
  };
  // float dirX = 1;
  void clear_dirx();
  float dirx() const;
  void set_dirx(float value);
  private:
  float _internal_dirx() const;
  void _internal_set_dirx(float value);
  public:

  // float dirY = 2;
  void clear_diry();
  float diry() const;
  void set_diry(float value);
  private:
  float _internal_diry() const;
  void _internal_set_diry(float value);
  public:

  // float dirZ = 3;
  void clear_dirz();
  float dirz() const;
  void set_dirz(float value);
  private:
  float _internal_dirz() const;
  void _internal_set_dirz(float value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float horizontal = 5;
  void clear_horizontal();
  float horizontal() const;
  void set_horizontal(float value);
  private:
  float _internal_horizontal() const;
  void _internal_set_horizontal(float value);
  public:

  // float vertical = 6;
  void clear_vertical();
  float vertical() const;
  void set_vertical(float value);
  private:
  float _internal_vertical() const;
  void _internal_set_vertical(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerMoveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float dirx_;
    float diry_;
    float dirz_;
    float yaw_;
    float horizontal_;
    float vertical_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ItemUpdateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ItemUpdateInfo) */ {
 public:
  inline ItemUpdateInfo() : ItemUpdateInfo(nullptr) {}
  ~ItemUpdateInfo() override;
  explicit PROTOBUF_CONSTEXPR ItemUpdateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemUpdateInfo(const ItemUpdateInfo& from);
  ItemUpdateInfo(ItemUpdateInfo&& from) noexcept
    : ItemUpdateInfo() {
    *this = ::std::move(from);
  }

  inline ItemUpdateInfo& operator=(const ItemUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemUpdateInfo& operator=(ItemUpdateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemUpdateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemUpdateInfo* internal_default_instance() {
    return reinterpret_cast<const ItemUpdateInfo*>(
               &_ItemUpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ItemUpdateInfo& a, ItemUpdateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemUpdateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemUpdateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemUpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemUpdateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemUpdateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemUpdateInfo& from) {
    ItemUpdateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemUpdateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ItemUpdateInfo";
  }
  protected:
  explicit ItemUpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kTemplateIdFieldNumber = 2,
    kNumberFieldNumber = 3,
    kSlotNumberFieldNumber = 4,
    kItemTypeFieldNumber = 5,
  };
  // uint64 dbId = 1;
  void clear_dbid();
  uint64_t dbid() const;
  void set_dbid(uint64_t value);
  private:
  uint64_t _internal_dbid() const;
  void _internal_set_dbid(uint64_t value);
  public:

  // uint32 templateId = 2;
  void clear_templateid();
  uint32_t templateid() const;
  void set_templateid(uint32_t value);
  private:
  uint32_t _internal_templateid() const;
  void _internal_set_templateid(uint32_t value);
  public:

  // uint32 number = 3;
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // uint32 slotNumber = 4;
  void clear_slotnumber();
  uint32_t slotnumber() const;
  void set_slotnumber(uint32_t value);
  private:
  uint32_t _internal_slotnumber() const;
  void _internal_set_slotnumber(uint32_t value);
  public:

  // .Protocol.EItemType itemType = 5;
  void clear_itemtype();
  ::Protocol::EItemType itemtype() const;
  void set_itemtype(::Protocol::EItemType value);
  private:
  ::Protocol::EItemType _internal_itemtype() const;
  void _internal_set_itemtype(::Protocol::EItemType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ItemUpdateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t dbid_;
    uint32_t templateid_;
    uint32_t number_;
    uint32_t slotnumber_;
    int itemtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class StatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.StatInfo) */ {
 public:
  inline StatInfo() : StatInfo(nullptr) {}
  ~StatInfo() override;
  explicit PROTOBUF_CONSTEXPR StatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatInfo(const StatInfo& from);
  StatInfo(StatInfo&& from) noexcept
    : StatInfo() {
    *this = ::std::move(from);
  }

  inline StatInfo& operator=(const StatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatInfo& operator=(StatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatInfo* internal_default_instance() {
    return reinterpret_cast<const StatInfo*>(
               &_StatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatInfo& a, StatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatInfo& from) {
    StatInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.StatInfo";
  }
  protected:
  explicit StatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kHpFieldNumber = 2,
    kMpFieldNumber = 3,
    kExpFieldNumber = 4,
    kAtkFieldNumber = 5,
    kDfsFieldNumber = 6,
    kLevelFieldNumber = 7,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float hp = 2;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // float mp = 3;
  void clear_mp();
  float mp() const;
  void set_mp(float value);
  private:
  float _internal_mp() const;
  void _internal_set_mp(float value);
  public:

  // float exp = 4;
  void clear_exp();
  float exp() const;
  void set_exp(float value);
  private:
  float _internal_exp() const;
  void _internal_set_exp(float value);
  public:

  // float atk = 5;
  void clear_atk();
  float atk() const;
  void set_atk(float value);
  private:
  float _internal_atk() const;
  void _internal_set_atk(float value);
  public:

  // float dfs = 6;
  void clear_dfs();
  float dfs() const;
  void set_dfs(float value);
  private:
  float _internal_dfs() const;
  void _internal_set_dfs(float value);
  public:

  // int32 level = 7;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.StatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    float hp_;
    float mp_;
    float exp_;
    float atk_;
    float dfs_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseCharacterInfo

// uint64 object_id = 1;
inline void BaseCharacterInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t BaseCharacterInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t BaseCharacterInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.BaseCharacterInfo.object_id)
  return _internal_object_id();
}
inline void BaseCharacterInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void BaseCharacterInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.BaseCharacterInfo.object_id)
}

// string name = 2;
inline void BaseCharacterInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BaseCharacterInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.BaseCharacterInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseCharacterInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.BaseCharacterInfo.name)
}
inline std::string* BaseCharacterInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.BaseCharacterInfo.name)
  return _s;
}
inline const std::string& BaseCharacterInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BaseCharacterInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BaseCharacterInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BaseCharacterInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.BaseCharacterInfo.name)
  return _impl_.name_.Release();
}
inline void BaseCharacterInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.BaseCharacterInfo.name)
}

// int32 level = 3;
inline void BaseCharacterInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t BaseCharacterInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t BaseCharacterInfo::level() const {
  // @@protoc_insertion_point(field_get:Protocol.BaseCharacterInfo.level)
  return _internal_level();
}
inline void BaseCharacterInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void BaseCharacterInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.BaseCharacterInfo.level)
}

// .Protocol.ECharacterType type = 4;
inline void BaseCharacterInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::ECharacterType BaseCharacterInfo::_internal_type() const {
  return static_cast< ::Protocol::ECharacterType >(_impl_.type_);
}
inline ::Protocol::ECharacterType BaseCharacterInfo::type() const {
  // @@protoc_insertion_point(field_get:Protocol.BaseCharacterInfo.type)
  return _internal_type();
}
inline void BaseCharacterInfo::_internal_set_type(::Protocol::ECharacterType value) {
  
  _impl_.type_ = value;
}
inline void BaseCharacterInfo::set_type(::Protocol::ECharacterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.BaseCharacterInfo.type)
}

// -------------------------------------------------------------------

// ObjectInfo

// uint64 object_id = 1;
inline void ObjectInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t ObjectInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t ObjectInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_id)
  return _internal_object_id();
}
inline void ObjectInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void ObjectInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_id)
}

// float x = 2;
inline void ObjectInfo::clear_x() {
  _impl_.x_ = 0;
}
inline float ObjectInfo::_internal_x() const {
  return _impl_.x_;
}
inline float ObjectInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.x)
  return _internal_x();
}
inline void ObjectInfo::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void ObjectInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.x)
}

// float y = 3;
inline void ObjectInfo::clear_y() {
  _impl_.y_ = 0;
}
inline float ObjectInfo::_internal_y() const {
  return _impl_.y_;
}
inline float ObjectInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.y)
  return _internal_y();
}
inline void ObjectInfo::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void ObjectInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.y)
}

// float z = 4;
inline void ObjectInfo::clear_z() {
  _impl_.z_ = 0;
}
inline float ObjectInfo::_internal_z() const {
  return _impl_.z_;
}
inline float ObjectInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.z)
  return _internal_z();
}
inline void ObjectInfo::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void ObjectInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.z)
}

// .Protocol.EState state = 5;
inline void ObjectInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::EState ObjectInfo::_internal_state() const {
  return static_cast< ::Protocol::EState >(_impl_.state_);
}
inline ::Protocol::EState ObjectInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.state)
  return _internal_state();
}
inline void ObjectInfo::_internal_set_state(::Protocol::EState value) {
  
  _impl_.state_ = value;
}
inline void ObjectInfo::set_state(::Protocol::EState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.state)
}

// .Protocol.ECharacterType objType = 6;
inline void ObjectInfo::clear_objtype() {
  _impl_.objtype_ = 0;
}
inline ::Protocol::ECharacterType ObjectInfo::_internal_objtype() const {
  return static_cast< ::Protocol::ECharacterType >(_impl_.objtype_);
}
inline ::Protocol::ECharacterType ObjectInfo::objtype() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.objType)
  return _internal_objtype();
}
inline void ObjectInfo::_internal_set_objtype(::Protocol::ECharacterType value) {
  
  _impl_.objtype_ = value;
}
inline void ObjectInfo::set_objtype(::Protocol::ECharacterType value) {
  _internal_set_objtype(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.objType)
}

// -------------------------------------------------------------------

// PlayerMoveInfo

// float dirX = 1;
inline void PlayerMoveInfo::clear_dirx() {
  _impl_.dirx_ = 0;
}
inline float PlayerMoveInfo::_internal_dirx() const {
  return _impl_.dirx_;
}
inline float PlayerMoveInfo::dirx() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMoveInfo.dirX)
  return _internal_dirx();
}
inline void PlayerMoveInfo::_internal_set_dirx(float value) {
  
  _impl_.dirx_ = value;
}
inline void PlayerMoveInfo::set_dirx(float value) {
  _internal_set_dirx(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMoveInfo.dirX)
}

// float dirY = 2;
inline void PlayerMoveInfo::clear_diry() {
  _impl_.diry_ = 0;
}
inline float PlayerMoveInfo::_internal_diry() const {
  return _impl_.diry_;
}
inline float PlayerMoveInfo::diry() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMoveInfo.dirY)
  return _internal_diry();
}
inline void PlayerMoveInfo::_internal_set_diry(float value) {
  
  _impl_.diry_ = value;
}
inline void PlayerMoveInfo::set_diry(float value) {
  _internal_set_diry(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMoveInfo.dirY)
}

// float dirZ = 3;
inline void PlayerMoveInfo::clear_dirz() {
  _impl_.dirz_ = 0;
}
inline float PlayerMoveInfo::_internal_dirz() const {
  return _impl_.dirz_;
}
inline float PlayerMoveInfo::dirz() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMoveInfo.dirZ)
  return _internal_dirz();
}
inline void PlayerMoveInfo::_internal_set_dirz(float value) {
  
  _impl_.dirz_ = value;
}
inline void PlayerMoveInfo::set_dirz(float value) {
  _internal_set_dirz(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMoveInfo.dirZ)
}

// float yaw = 4;
inline void PlayerMoveInfo::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float PlayerMoveInfo::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float PlayerMoveInfo::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMoveInfo.yaw)
  return _internal_yaw();
}
inline void PlayerMoveInfo::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void PlayerMoveInfo::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMoveInfo.yaw)
}

// float horizontal = 5;
inline void PlayerMoveInfo::clear_horizontal() {
  _impl_.horizontal_ = 0;
}
inline float PlayerMoveInfo::_internal_horizontal() const {
  return _impl_.horizontal_;
}
inline float PlayerMoveInfo::horizontal() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMoveInfo.horizontal)
  return _internal_horizontal();
}
inline void PlayerMoveInfo::_internal_set_horizontal(float value) {
  
  _impl_.horizontal_ = value;
}
inline void PlayerMoveInfo::set_horizontal(float value) {
  _internal_set_horizontal(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMoveInfo.horizontal)
}

// float vertical = 6;
inline void PlayerMoveInfo::clear_vertical() {
  _impl_.vertical_ = 0;
}
inline float PlayerMoveInfo::_internal_vertical() const {
  return _impl_.vertical_;
}
inline float PlayerMoveInfo::vertical() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMoveInfo.vertical)
  return _internal_vertical();
}
inline void PlayerMoveInfo::_internal_set_vertical(float value) {
  
  _impl_.vertical_ = value;
}
inline void PlayerMoveInfo::set_vertical(float value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMoveInfo.vertical)
}

// -------------------------------------------------------------------

// ItemUpdateInfo

// uint64 dbId = 1;
inline void ItemUpdateInfo::clear_dbid() {
  _impl_.dbid_ = uint64_t{0u};
}
inline uint64_t ItemUpdateInfo::_internal_dbid() const {
  return _impl_.dbid_;
}
inline uint64_t ItemUpdateInfo::dbid() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemUpdateInfo.dbId)
  return _internal_dbid();
}
inline void ItemUpdateInfo::_internal_set_dbid(uint64_t value) {
  
  _impl_.dbid_ = value;
}
inline void ItemUpdateInfo::set_dbid(uint64_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemUpdateInfo.dbId)
}

// uint32 templateId = 2;
inline void ItemUpdateInfo::clear_templateid() {
  _impl_.templateid_ = 0u;
}
inline uint32_t ItemUpdateInfo::_internal_templateid() const {
  return _impl_.templateid_;
}
inline uint32_t ItemUpdateInfo::templateid() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemUpdateInfo.templateId)
  return _internal_templateid();
}
inline void ItemUpdateInfo::_internal_set_templateid(uint32_t value) {
  
  _impl_.templateid_ = value;
}
inline void ItemUpdateInfo::set_templateid(uint32_t value) {
  _internal_set_templateid(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemUpdateInfo.templateId)
}

// uint32 number = 3;
inline void ItemUpdateInfo::clear_number() {
  _impl_.number_ = 0u;
}
inline uint32_t ItemUpdateInfo::_internal_number() const {
  return _impl_.number_;
}
inline uint32_t ItemUpdateInfo::number() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemUpdateInfo.number)
  return _internal_number();
}
inline void ItemUpdateInfo::_internal_set_number(uint32_t value) {
  
  _impl_.number_ = value;
}
inline void ItemUpdateInfo::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemUpdateInfo.number)
}

// uint32 slotNumber = 4;
inline void ItemUpdateInfo::clear_slotnumber() {
  _impl_.slotnumber_ = 0u;
}
inline uint32_t ItemUpdateInfo::_internal_slotnumber() const {
  return _impl_.slotnumber_;
}
inline uint32_t ItemUpdateInfo::slotnumber() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemUpdateInfo.slotNumber)
  return _internal_slotnumber();
}
inline void ItemUpdateInfo::_internal_set_slotnumber(uint32_t value) {
  
  _impl_.slotnumber_ = value;
}
inline void ItemUpdateInfo::set_slotnumber(uint32_t value) {
  _internal_set_slotnumber(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemUpdateInfo.slotNumber)
}

// .Protocol.EItemType itemType = 5;
inline void ItemUpdateInfo::clear_itemtype() {
  _impl_.itemtype_ = 0;
}
inline ::Protocol::EItemType ItemUpdateInfo::_internal_itemtype() const {
  return static_cast< ::Protocol::EItemType >(_impl_.itemtype_);
}
inline ::Protocol::EItemType ItemUpdateInfo::itemtype() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemUpdateInfo.itemType)
  return _internal_itemtype();
}
inline void ItemUpdateInfo::_internal_set_itemtype(::Protocol::EItemType value) {
  
  _impl_.itemtype_ = value;
}
inline void ItemUpdateInfo::set_itemtype(::Protocol::EItemType value) {
  _internal_set_itemtype(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemUpdateInfo.itemType)
}

// -------------------------------------------------------------------

// StatInfo

// uint64 object_id = 1;
inline void StatInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t StatInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t StatInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.object_id)
  return _internal_object_id();
}
inline void StatInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void StatInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.object_id)
}

// float hp = 2;
inline void StatInfo::clear_hp() {
  _impl_.hp_ = 0;
}
inline float StatInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline float StatInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.hp)
  return _internal_hp();
}
inline void StatInfo::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void StatInfo::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.hp)
}

// float mp = 3;
inline void StatInfo::clear_mp() {
  _impl_.mp_ = 0;
}
inline float StatInfo::_internal_mp() const {
  return _impl_.mp_;
}
inline float StatInfo::mp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.mp)
  return _internal_mp();
}
inline void StatInfo::_internal_set_mp(float value) {
  
  _impl_.mp_ = value;
}
inline void StatInfo::set_mp(float value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.mp)
}

// float exp = 4;
inline void StatInfo::clear_exp() {
  _impl_.exp_ = 0;
}
inline float StatInfo::_internal_exp() const {
  return _impl_.exp_;
}
inline float StatInfo::exp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.exp)
  return _internal_exp();
}
inline void StatInfo::_internal_set_exp(float value) {
  
  _impl_.exp_ = value;
}
inline void StatInfo::set_exp(float value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.exp)
}

// float atk = 5;
inline void StatInfo::clear_atk() {
  _impl_.atk_ = 0;
}
inline float StatInfo::_internal_atk() const {
  return _impl_.atk_;
}
inline float StatInfo::atk() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.atk)
  return _internal_atk();
}
inline void StatInfo::_internal_set_atk(float value) {
  
  _impl_.atk_ = value;
}
inline void StatInfo::set_atk(float value) {
  _internal_set_atk(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.atk)
}

// float dfs = 6;
inline void StatInfo::clear_dfs() {
  _impl_.dfs_ = 0;
}
inline float StatInfo::_internal_dfs() const {
  return _impl_.dfs_;
}
inline float StatInfo::dfs() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.dfs)
  return _internal_dfs();
}
inline void StatInfo::_internal_set_dfs(float value) {
  
  _impl_.dfs_ = value;
}
inline void StatInfo::set_dfs(float value) {
  _internal_set_dfs(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.dfs)
}

// int32 level = 7;
inline void StatInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t StatInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t StatInfo::level() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.level)
  return _internal_level();
}
inline void StatInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void StatInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
