// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#include "Enum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
}  // namespace Protocol
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Enum_2eproto[17];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Enum_2eproto = nullptr;
const uint32_t TableStruct_Enum_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Enum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nEnum.proto\022\010Protocol*K\n\016ECharacterType"
  "\022\013\n\007WARRIOR\020\000\022\t\n\005ROGUE\020\001\022\n\n\006WIZARD\020\002\022\013\n\007"
  "MONSTER\020\003\022\010\n\004NONE\020\004*\235\001\n\006EState\022\016\n\nSTATE_"
  "NONE\020\000\022\016\n\nSTATE_IDLE\020\001\022\016\n\nSTATE_MOVE\020\002\022\r"
  "\n\tSTATE_RUN\020\003\022\020\n\014STATE_ATTACK\020\004\022\017\n\013STATE"
  "_SKILL\020\005\022\021\n\rSTATE_DAMAGED\020\006\022\016\n\nSTATE_DEA"
  "D\020\007\022\016\n\nSTATE_JUMP\020\010*\354\001\n\nEQuickSlot\022\013\n\007QU"
  "ICK_0\020\000\022\013\n\007QUICK_1\020\001\022\013\n\007QUICK_2\020\002\022\013\n\007QUI"
  "CK_3\020\003\022\013\n\007QUICK_4\020\004\022\013\n\007QUICK_5\020\005\022\013\n\007QUIC"
  "K_6\020\006\022\013\n\007QUICK_7\020\007\022\013\n\007QUICK_8\020\010\022\013\n\007QUICK"
  "_9\020\t\022\013\n\007QUICK_Q\020\n\022\013\n\007QUICK_E\020\013\022\013\n\007QUICK_"
  "R\020\014\022\013\n\007QUICK_C\020\r\022\013\n\007QUICK_V\020\016\022\013\n\007QUICK_T"
  "\020\017\022\016\n\nQUICK_NONE\020\020*4\n\021EQuickElementType\022"
  "\016\n\nQUICK_ITEM\020\000\022\017\n\013QUICK_SKILL\020\001*H\n\013EPla"
  "yerData\022\023\n\017DATA_ATTACKABLE\020\000\022\025\n\021DATA_UNA"
  "TTACKABLE\020\001\022\r\n\tDATA_IDLE\020\002*M\n\010ENpcType\022\016"
  "\n\nNPC_NORMAL\020\000\022\016\n\nNPC_WEAPON\020\001\022\r\n\tNPC_AR"
  "MOR\020\002\022\022\n\016NPC_CONSUMABLE\020\003*A\n\tEItemType\022\017"
  "\n\013ITEM_WEAPON\020\000\022\016\n\nITEM_ARMOR\020\001\022\023\n\017ITEM_"
  "CONSUMABLE\020\002*.\n\nEItemGrade\022\020\n\014GRADE_NORM"
  "AL\020\000\022\016\n\nGRADE_RARE\020\001*%\n\tEHealType\022\013\n\007HEA"
  "L_HP\020\000\022\013\n\007HEAL_MP\020\001*V\n\nESlotState\022\r\n\tSLO"
  "T_NONE\020\000\022\021\n\rSLOT_EQUIPPED\020\001\022\022\n\016SLOT_INVE"
  "NTORY\020\002\022\022\n\016SLOT_WAREHOUSE\020\003*)\n\014EGetItemT"
  "ype\022\014\n\010GET_DROP\020\000\022\013\n\007GET_BUY\020\001*G\n\013EWeapo"
  "nData\022\023\n\017WEAPON_TWOHANDS\020\000\022\021\n\rWEAPON_DAG"
  "GER\020\001\022\020\n\014WEAPON_STAFF\020\002*b\n\nEArmorData\022\020\n"
  "\014ARMOR_HELMET\020\000\022\r\n\tARMOR_TOP\020\001\022\020\n\014ARMOR_"
  "BOTTOM\020\002\022\017\n\013ARMOR_BOOTS\020\003\022\020\n\014ARMOR_GLOVE"
  "S\020\004*I\n\017EStatChangeType\022\013\n\007STAT_HP\020\000\022\013\n\007S"
  "TAT_MP\020\001\022\014\n\010STAT_EXP\020\002\022\016\n\nSTAT_LEVEL\020\003*/"
  "\n\013EQuestGrade\022\016\n\nQUEST_MAIN\020\000\022\020\n\014QUEST_N"
  "ORMAL\020\001*\215\001\n\013EQuestState\022\023\n\017QUEST_AVAILAB"
  "LE\020\000\022\020\n\014QUEST_ACCEPT\020\001\022\025\n\021QUEST_COMPLETA"
  "BLE\020\002\022\023\n\017QUEST_COMPLETED\020\003\022\021\n\rQUEST_ABAN"
  "DON\020\004\022\030\n\024QUEST_NOTCOMPLETABLE\020\005*Y\n\013ETarg"
  "etType\022\022\n\016TARGET_MONSTER\020\000\022\016\n\nTARGET_NPC"
  "\020\001\022\025\n\021TARGET_CONSUMABLE\020\002\022\017\n\013TARGET_MISC"
  "\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Enum_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Enum_2eproto = {
    false, false, 1530, descriptor_table_protodef_Enum_2eproto,
    "Enum.proto",
    &descriptor_table_Enum_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_Enum_2eproto::offsets,
    nullptr, file_level_enum_descriptors_Enum_2eproto,
    file_level_service_descriptors_Enum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Enum_2eproto_getter() {
  return &descriptor_table_Enum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Enum_2eproto(&descriptor_table_Enum_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECharacterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[0];
}
bool ECharacterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[1];
}
bool EState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EQuickSlot_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[2];
}
bool EQuickSlot_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EQuickElementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[3];
}
bool EQuickElementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlayerData_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[4];
}
bool EPlayerData_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENpcType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[5];
}
bool ENpcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[6];
}
bool EItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EItemGrade_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[7];
}
bool EItemGrade_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHealType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[8];
}
bool EHealType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESlotState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[9];
}
bool ESlotState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGetItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[10];
}
bool EGetItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWeaponData_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[11];
}
bool EWeaponData_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EArmorData_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[12];
}
bool EArmorData_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStatChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[13];
}
bool EStatChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EQuestGrade_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[14];
}
bool EQuestGrade_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EQuestState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[15];
}
bool EQuestState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETargetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[16];
}
bool ETargetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
